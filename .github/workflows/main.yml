name: .NET Framework 4.5 WinForm CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发工作流

env:
  SOLUTION_NAME: 'TestForm\TestForm.sln'  # 替换为你的解决方案文件名
  BUILD_CONFIGURATION: 'Release'
  BUILD_PLATFORM: 'AnyCPU'

jobs:
  build:
    runs-on: windows-latest  # 必须使用 Windows 环境

    steps:
    # 步骤 1: 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 步骤 2: 设置构建环境
    - name: Setup MSBuild
      run: |
        # 查找最新版本的 MSBuild
        $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.Component.MSBuild -property installationPath
        $msBuildPath = Join-Path $vsPath "MSBuild\Current\Bin"
        Write-Host "MSBuild path: $msBuildPath"
        # 使用新方法添加路径
        echo "$msBuildPath" | Out-File -FilePath $env:GITHUB_PATH -Append
      shell: pwsh

    # 步骤 3: 还原 NuGet 包
    - name: NuGet restore
      run: |
        nuget restore $env:SOLUTION_NAME

    # 步骤 4: 构建解决方案
    - name: Build solution
      run: |
        # 尝试不同的配置组合
        # 组合 1: Release|Any CPU (注意空格)
        msbuild YourSolution.sln /p:Configuration=Release /p:Platform="Any CPU" /verbosity:minimal || 
        # 组合 2: Release|x86
        msbuild YourSolution.sln /p:Configuration=Release /p:Platform=x86 /verbosity:minimal || 
        # 组合 3: Debug|Any CPU
        msbuild YourSolution.sln /p:Configuration=Debug /p:Platform="Any CPU" /verbosity:minimal || 
        # 组合 4: Debug|x86
        msbuild YourSolution.sln /p:Configuration=Debug /p:Platform=x86 /verbosity:minimal || 
        # 如果所有组合都失败，显示错误
        echo "所有配置尝试都失败，请检查解决方案中的有效配置" && exit 1
      shell: pwsh
    # 步骤 5: 运行测试（如果有）
    - name: Run tests
      run: |
        # 查找并运行测试项目
        $testProjects = Get-ChildItem -Path . -Recurse -Filter "*Tests.csproj" | Where-Object { $_.FullName -match "test" -or $_.Name -match "Test" }
        foreach ($project in $testProjects) {
          echo "Running tests in $($project.Name)"
          msbuild $project.FullName /p:Configuration=$env:BUILD_CONFIGURATION /t:Build
          $testDll = $project.FullName -replace "csproj", "dll" -replace "\\[^\\]*$", "\bin\$env:BUILD_CONFIGURATION\$($project.BaseName).dll"
          if (Test-Path $testDll) {
            vstest.console.exe $testDll /Logger:trx
          }
        }
      shell: pwsh
      continue-on-error: true  # 即使测试失败也继续后续步骤

    # 步骤 6: 发布应用程序
    - name: Publish application
      run: |
        # 查找主项目（假设是 WinForms 项目）
        $winFormsProjects = Get-ChildItem -Path . -Recurse -Filter "*.csproj" | Where-Object { 
          $projContent = Get-Content $_.FullName
          $projContent -match "WindowsForms" -or $projContent -match "WinForms"
        }
        
        foreach ($project in $winFormsProjects) {
          $projectName = $project.BaseName
          $outputPath = ".\publish\$projectName"
          
          # 使用 MSBuild 发布项目
          msbuild $project.FullName /p:Configuration=$env:BUILD_CONFIGURATION /p:Platform=$env:BUILD_PLATFORM /t:Publish /p:PublishDir=$outputPath
          
          # 创建压缩包以便分发
          Compress-Archive -Path "$outputPath\*" -DestinationPath ".\publish\$projectName.zip" -Force
        }
      shell: pwsh

    # 步骤 7: 上传构建产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: winform-app
        path: |
          publish/
          **/bin/${{ env.BUILD_CONFIGURATION }}/*.exe
        if-no-files-found: error

    # 步骤 8: 创建发布版本（仅针对 main 分支的推送）
    - name: Create Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: Release v1.0.${{ github.run_number }}
        draft: false
        prerelease: false

    # 步骤 9: 上传发布资源
    - name: Upload Release Asset
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish/TestForm.zip  # 替换为你的项目名称
        asset_name: P.FW.AAC-v1.0.${{ github.run_number }}.zip
        asset_content_type: application/zip
